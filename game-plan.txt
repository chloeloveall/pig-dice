{GAME PLAN}

Roll a single die
Die value is added to a div to display
If additional roll occurs, die value is added to previous die value
When player selects to 'hold' the running total from turn is added to score total
if player 'rolls' a 1, all points from turn are forfeited 
When score total reaches or exceeds 100, game is over and winner is declared


{GRAPH}

|Behavior                                                                     |Input      |Output
|When an individual player rolls the die it returns a value between 1 and 6   |2          |2
|When our die value >1, die value added to turn total                         |2          |2
|When our die value =1, no value not added to turn total                      |1          |0
|When player opts to hold, it is now the other players turn                   |Hold       |Player 2's turn
|When player opts to "hold", turn total is added to score total               |6          |6
|When players score is >=100, game is ended and the score totals are returned |           |

Describe: Game()
Test: 'It will construct a game instance'
Code: let newGameInstance = new Game();
Expect(newGameInstance).toEqual(Game {player});

Test: 'It will store our player objects in our game object'
Expect(Game.prototype.addPlayer).toEqual(player {playerName})

Describe: Player()
Test: 'It will construct instances of Player'
Code: let newPlayerInstance = new Player();
Expect(newPlayerInstance).toEqual(Player {playerName});

Describe: rollDie()
Test 'It should return a integer between 1 and 6'
Code: Math.floor(Math.random() * 6);
Expect(rollDie()).toEqual(1 =< x <= 6)


{DIAGRAM}

    Player Constructor
            |
        name: name
        score: score   
            |
        method(s)
        /        \
[player 1]    [player 2]
     |             |
     |             |
        properties
      /            \
    Name          Name
   Score          Score
     |              |
   Method         Method
     /               \
   Roll             Roll
   Hold             Hold


          Winner
            |
         property
            | 
    collection of scores
            |
         methods
            |
  new game (delete button)






